> require "core.llc"
> require "bit.llc"
> require "ix.llc"

-----------------------
# RELATING PHYSICAL AND VIRTUAL MEMORY ADDRESSES

> external physEq=physEqImp, physNe=physNeImp :: Phys a -> Phys a -> Bool
> physEqImp = (==) :: Word -> Word -> Bool
> physNeImp = (/=) :: Word -> Word -> Bool

> external toPhys=toPhysImp     :: Ref a -> Phys a
> external fromPhys=fromPhysImp :: Phys a -> Ref a

> fromPhysImp  :: Word -> Word
> fromPhysImp x = x + kernelSpace

> toPhysImp    :: Word -> Word
> toPhysImp x   = x - kernelSpace

> kernelSpace  :: Word
> kernelSpace   = 0xc000_0000

> external physToWord=physToWordImp :: Phys a -> Word
> physToWordImp :: Word -> Word
> physToWordImp x = x

-----------------------
# USER-LEVEL VIRTUAL MEMORY ADDRESSES

> export pageBits, superPageBits, wordBits
> pageBits      = 12 :: Word
> superPageBits = 22 :: Word
> wordBits      = 32 :: Word

> type PageSize      = 4K
> type SuperPageSize = 4M

> struct SuperPage /SuperPageSize
>   [ bytes :: Array SuperPageSize (Stored Byte) ]
>   aligned SuperPageSize

> struct Page /PageSize
>   [ bytes :: Array PageSize (Stored Byte) ]
>   aligned PageSize

> bitdata VAddr /WordSize = VAddr [ vp :: VPage | offset :: Bit 12 ]
>                           -- deriving Eq, ToBits
> bitdata VPage /20       = VPage [ sp :: Ix UserSuperPages | pg :: Ix 1K ]
>                           -- deriving Eq, ToBits

> type UserSuperPages    = 768 -- Number of superpages in the user space address range
> type KernelSuperPages  = 256 -- Number of superpages in the kernel space address range
> type KernelSuperPages1 = 255 -- should be KernelSuperPages-1

-----------------------
# PAGE DIRECTORIES AND PAGE TABLES

-----------------------
### User-Space Page Directory Entries

> bitdata PDE /WordSize                                -- Defines format for Page Directory Entries
>  = UnmappedPDE  [ unused=bit0     :: Bit 31 
>                 | B0 ]                               -- Unused entry (present bit reset)
>  | PageTablePDE [ ptab            :: Phys PageTable  -- physical address of page table
>                 | unused=bit0     :: Bit 4
>                 | B0                                 -- signals PageTablePDE
>                 | attrs=readWrite :: PagingAttrs     -- paging attributes
>                 | B1 ]                               -- present bit set
>  | SuperPagePDE [ super           :: Phys SuperPage  -- physical address of superpage
>                 | unused=bit0     :: Bit 13
>                 | global=False    :: Bool            -- True => global translation (if cr4.pge=1)
>                 | B1                                 -- signals SuperPagePDE
>                 | attrs           :: PagingAttrs     -- paging attributes
>                 | B1 ]                               -- present bit set 

> bitdata PagingAttrs /6
>  = PagingAttrs [ dirty    = False     :: Bool        -- Dirty; True => data written to page
>                | accessed = False     :: Bool        -- Accessed; True => page accessed
>                | caching  = Caching[] :: Caching
>                | us                   :: Bool        -- User/supervisor; True => user access allowed
>                | rw                   :: Bool  ]     -- Read/write; True => write access allowed

> bitdata Caching /2                                   -- pwt=True => page-level write thru
>  = Caching [ pcd=False, pwt=False :: Bool ]          -- pcd=True => page-level cache disable

> readWrite      :: PagingAttrs
> readWrite       = PagingAttrs[us=True | rw=True]     -- user and write access allowed

> readOnly       :: PagingAttrs
> readOnly        = PagingAttrs[us=True | rw=False]    -- user access, but no write

> kernelOnly     :: PagingAttrs
> kernelOnly      = PagingAttrs[us=False | rw=True]    -- kernel only, write allowed

-----------------------
### Kernel-Space Page Directory Entries

> bitdata KPDE /WordSize                                 -- Kernel Page Directory Entries, a variant of SuperPagePDE
>  = UnmappedKPDE  [ unused=bit0 :: Bit 31 
>                  | B0 ]                                -- Unused entry (present bit reset)
>  | SuperPageKPDE [ B00                                 -- leading zeros
>                  | ix          :: Ix KernelSuperPages1 -- physical superpage number
>                  | unused=bit0 :: Bit 13
>                  | global=True :: Bool                 -- True => global translation (if cr4.pge=1)
>                  | B1                                  -- indicates a form of SuperPagePDE
>                  | attrs=kernelOnly :: PagingAttrs     -- paging attributes
>                  | B1 ]

-----------------------
### Page Directory Layout

> struct PageDir /PageSize
>   [ pdes      :: Array UserSuperPages    (Stored PDE)
>   | kpdes     :: Array KernelSuperPages1 (Stored KPDE)
>   | bufferPDE :: Stored PDE ] 
>   aligned PageSize

> export initPageDir
> initPageDir :: Init PageDir
> initPageDir  = PageDir [ pdes      <- initArray (\ix -> initStored UnmappedPDE[])
>                        | kpdes     <- initArray (\ix -> initStored UnmappedKPDE[])
>                        | bufferPDE <- initStored bufferPtabPDE ]

> bufferPtabPDE :: PDE
> bufferPtabPDE  = UnmappedPDE[]     -- TODO: change to point to page table for buffer ...

> export putPageDir
> putPageDir :: Ref PageDir -> Proc Unit
> putPageDir pdir
>   = do puts "  Page directory at "
>        putHex (refToWord pdir)
>        puts "\n"
>        foreach (\ix -> get (pdir.pdes  @ ix) >>= putPDE  ix)
>        foreach (\ix -> get (pdir.kpdes @ ix) >>= putKPDE ix)
>        -- bufferPDE?

> putPDE  :: Ix UserSuperPages -> PDE -> Proc Unit
> putPDE ix pde
>   = do case pde of
>          UnmappedPDE r ->
>            return Unit
>          PageTablePDE r ->
>            puts "    "
>            putRange 1 2
>            puts " => page table at "
>            putHex 3
>            puts " (physical "
>            putHex 4
>            puts "):\n"
>            -- show page table entries
>          SuperPagePDE r ->
>            puts "    "
>            putHex (ixToBit ix)
>            puts ": "
>            putSuperRange (ixToBit ix)
>            puts " => "
>            putSuperRange (physToWord r.super)
>            puts ", superpage\n"

> putSuperRange :: Word -> Proc Unit
> putSuperRange lo = putRange start (start + 0x3fffff)
>   where start = (lo `shl` superPageBits)

> putKPDE :: Ix KernelSuperPages1 -> KPDE -> Proc Unit
> putKPDE ix kpde
>   = do case kpde of 
>          UnmappedKPDE r ->
>            return Unit
>          SuperPageKPDE r ->
>            puts "    "
>            putHex (0x300 + (ixToBit ix))
>            puts ": "
>            putKernelSuperRange (ixToBit ix)
>            puts " => "
>            putSuperRange (ixToBit r.ix)
>            puts ", superpage\n"

> putKernelSuperRange :: Word -> Proc Unit
> putKernelSuperRange lo = putRange start (start + 0x3fffff)
>   where start = (lo `shl` superPageBits) + kernelSpace

> putRange :: Word -> Word -> Proc Unit
> putRange lo hi
>   = do puts "["
>        putHex lo
>        puts "-"
>        putHex hi
>        puts "]"

## Page Table Layout

> bitdata PTE /WordSize                           -- Defines the format for Page Table Entries
>   = UnmappedPTE  [ unused=bit0  :: Bit 31
>                  | B0 ]                         -- Unused entry (present bit reset)
>   | MappedPTE    [ page         :: Phys Page    -- physical address of mapped page
>                  | unused=bit0  :: Bit 3
>                  | global=False :: Bool         -- 1 => global translation (if cr4.pge=1)
>                  | pat=False    :: Bool         -- PAT bit (not used)
>                  | attrs        :: PagingAttrs  -- paging attributes
>                  | B1 ]                         -- present bit set

> struct PageTable /PageSize                      -- Defines the layout of Page Table objects
>   [ ptes :: Array 1K (Stored PTE) ]
>   aligned PageSize

> export initPageTable :: Init PageTable
> initPageTable  = PageTable [ ptes <- initArray (\ix -> initStored UnmappedPTE[]) ]

-----------------------
# PAGING CONTROL REGISTERS

> bitdata CR3 /WordSize
>   = CR3 [ phys         :: Phys PageDir
>         | unused1=bit0 :: Bit 7
>         | caching      :: Caching
>         | unused2=bit0 :: Bit 3 ]

> external getCR2 :: Proc VAddr          -- Read the faulting address from the cr2 register
> external getCR3 :: Proc CR3            -- Read the page directory register
> external setCR3 :: CR3 -> Proc Unit    -- Write the page directory register
> external invlpg :: Ref a -> Proc Unit  -- Flush TLB entries for the specified address

> export setPageDir :: Ref PageDir -> Proc Unit
> setPageDir pdir    = do let phys = toPhys pdir
>                         cr3 <- getCR3
>                         if phys `physNe` cr3.phys then
>                           setCR3 cr3[phys]

> bitdata PageFaultErrorCode /WordSize
>  = PageFaultErrorCode [ unused=bit0 :: Bit 27
>                       | id          :: Bit 1   -- 0 => data, 1 => instruction fetch
>                       | reservedBit :: Bit 1   -- 1 => fault from reserved bit violation
>                       | us          :: Bit 1   -- 1 => fault occurred in user mode
>                       | wr          :: Bit 1   -- 1 => write access caused fault
>                       | p           :: Bit 1 ] -- 0 => non-present bit; 1 => protection violation

-----------------------
# SEGMENTATION

> type Ring = Ix 4  -- protection level: 0=kernel, 3=user level

> bitdata SegSelector /WordSize
>   = SegSelector [ 0 | index :: Ix 8K | table=B0 :: Bit 1 | rpl :: Ring ]
>     -- index: offset in table
>     -- table: 0=GDT, 1=LDT
>     -- rpl:   requested privilege level

> external segSelectorToWord = segSelectorToWord_imp
>   :: SegSelector -> Word
> segSelectorToWord_imp  :: Word -> Word
> segSelectorToWord_imp s = s

> kernelCS, kernelDS :: SegSelector  -- kernel code and data segments
> kernelCS            = SegSelector [ index=ix4 | rpl=ix0 ]
> kernelDS            = SegSelector [ index=ix5 | rpl=ix0 ]

> userCS, userDS     :: SegSelector  -- user code and data segments
> userCS              = SegSelector [ index=ix6 | rpl=ix3 ]
> userDS              = SegSelector [ index=ix7 | rpl=ix3 ]

> bufferPtrDS        :: SegSelector  -- IPC buffer pointer segment
> bufferPtrDS         = SegSelector [ index=ix2 | rpl=ix3 ]

-----------------------
# CPU REGISTERS

## Flags

> bitdata IA32Flags/WordSize
>   = IA32Flags [ 0                     -- Reserved: FIXME allow type sig
>               | id   = B0  :: Bit 1   -- identification flag
>               | vip  = B0  :: Bit 1   -- virtual interrupt pending
>               | vif  = B0  :: Bit 1   -- virtual interrupt flag
>               | ac   = B0  :: Bit 1   -- alignment check
>               | vm   = B0  :: Bit 1   -- virtual 8086 mode
>               | rf   = B0  :: Bit 1   -- resume flag
>               | B0
>               | nt   = B0  :: Bit 1   -- nested task flag
>               | iopl = ix0 :: Ring    -- I/O privilege level
>               | ovf  = B0  :: Bit 1   -- overflow flag
>               | df   = B0  :: Bit 1   -- direction flag
>               | ifl  = B0  :: Bit 1   -- interrupt flag
>               | tf   = B0  :: Bit 1   -- trap flag
>               | sf   = B0  :: Bit 1   -- sign flag
>               | zf   = B0  :: Bit 1   -- zero flag
>               | B0
>               | af   = B0  :: Bit 1   -- adjust flag
>               | B0
>               | pf   = B0  :: Bit 1   -- parity flag
>               | B1                    -- Intel reserved; must be 1
>               | cf   = B0  :: Bit 1 ] -- carry flag

> updateFlags          :: IA32Flags -> IA32Flags -> IA32Flags
> updateFlags flags new = flags[cf=new.cf | pf=new.pf | af=new.af | zf=new.zf | sf=new.sf | ovf=new.ovf]
>                          -- carry, parity, adjust, zero, sign, overflow

> external ia32FlagsToWord = ia32FlagsToWord_imp :: IA32Flags -> Word
> ia32FlagsToWord_imp  :: Word -> Word
> ia32FlagsToWord_imp e = e

-----------------------
## Contexts

> struct Context /72 [ regs    :: Registers          -- General purpose registers
>                    | segregs :: SegRegs            -- Segment registers
>                    | iframe  :: IFrame ]           -- Interrupt frame

> struct IFrame /24 [ err    :: Stored Word          -- error code (if any)
>                   | eip    :: Stored Word          -- (user-level) instruction pointer
>                   | cs     :: Stored SegSelector   -- (user-level) code segment
>                   | eflags :: Stored IA32Flags     -- (user-level) flags
>                   | esp    :: Stored Word          -- (user-level) stack pointer
>                   | ss     :: Stored SegSelector ] -- (user-level) stack segment

> struct SegRegs /16 [ ds, es, fs, gs :: Stored SegSelector ]

> struct Registers /32 [ edi, esi, ebp, esp, ebx, edx, ecx, eax :: Stored Word ]
>                      -- deriving NullInit

> export putContext :: Ref Context -> Proc Unit
> putContext context
>   = do puts "General Registers:\n  "
>        putReg "edi"      context.regs.edi
>        putReg ", esi"    context.regs.esi
>        putReg ", ebp"    context.regs.ebp
>        putReg ", esp"    context.regs.esp
>        putReg ", ebx"    context.regs.ebx
>        putReg ", edx"    context.regs.edx
>        putReg ", ecx"    context.regs.ecx
>        putReg ", eax"    context.regs.eax
>        puts "\nSegment Registers:\n  "
>        putSeg "ds"       context.segregs.ds
>        putSeg ", es"     context.segregs.es
>        putSeg ", fs"     context.segregs.fs
>        putSeg ", gs"     context.segregs.gs
>        puts "\nFrame Registers:\n  "
>        putReg "err"      context.iframe.err
>        putReg ", eip"    context.iframe.eip
>        putSeg ", cs"     context.iframe.cs
>        putFlg ", eflags" context.iframe.eflags
>        putReg ", esp"    context.iframe.esp
>        putSeg ", ss"     context.iframe.ss
>        puts "\n"
>   where putReg n r = do w <- get r; putW n w
>         putSeg n r = do s <- get r; putW n (segSelectorToWord s)
>         putFlg n r = do f <- get r; putW n (ia32FlagsToWord f)
>         putW   n w = do puts n
>                         puts "="
>                         putHex w

> initRegisters :: Init Registers
> initRegisters  = Registers [ edi <- initStored 0 | esi <- initStored 0
>                            | ebp <- initStored 0 | esp <- initStored 0
>                            | ebx <- initStored 0 | edx <- initStored 0
>                            | ecx <- initStored 0 | eax <- initStored 0 ]

> export initUserContext :: Bit 1 -> Init Context
> initUserContext ifl     = initContext userCS userDS 0 flags
>  where flags = IA32Flags [ iopl=ix3 | ifl ]

> export initIdleContext    :: Word -> Init Context
> initIdleContext eip = initContext kernelCS kernelDS eip flags
>  where flags = IA32Flags [ iopl=ix0 | ifl=B1 ]

> initContext :: SegSelector -> SegSelector -> Word -> IA32Flags -> Init Context
> initContext cs ds eip flags
>   = Context [ regs    <- initRegisters
>             | segregs <- SegRegs [ ds     <- initStored ds
>                                  | es     <- initStored ds
>                                  | fs     <- initStored ds
>                                  | gs     <- initStored ds {-bufferPtrDS-} ]
>             | iframe  <- IFrame  [ err    <- initStored 0
>                                  | eip    <- initStored eip
>                                  | eflags <- initStored flags
>                                  | cs     <- initStored cs
>                                  | esp    <- initStored 0
>                                  | ss     <- initStored ds ] ]

> external returnToUser :: Ref Context -> Proc a

-----------------------
# FLOATING POINT STATE

> struct FPUState /512 [ fpustate :: Pad 512 (Stored Byte) ]
>        aligned 16
>        -- deriving NoInit

> external fxsave     :: Ref FPUState -> Proc Unit -- save the FPU state to the specified memory block
> external fxrstor    :: Ref FPUState -> Proc Unit -- restore the FPU state from the specified memory
> external finit      :: Proc Unit                 -- initialize the FPU state (registers)
> external fpuEnable  :: Proc Unit                 -- enable the use of FPU state registers
> external fpuDisable :: Proc Unit                 -- disable the use of FPU state registers

-----------------------
