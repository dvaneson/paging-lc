> require "serial.llc"
> require "wvram.llc"
> require "mimg.llc"
> require "cursor.llc"
> require "ia32.llc"
> require "pc-hardware.llc"
> require "widgets.llc"
> require "paging.llc"

> external bootdata = 0x1000 :: Ref MimgBootData
> external initdir {initdir_ptr} :: Ref PageDir

This file aims to be an LC solution to the LLP paging labs.

The program sets up a window for kernel output on the left of
the screen (with a surrounding border), displays the bootdata,
and then uses bootdata headers to locate and runs two external
user programs (which, for this demo, have been crafted to run
in separate smaller windows on the right side of the screen).
The program configures the system clock to provide interrupts
100 times a second, and automatically context switches between
the two user programs.

Paging is enabled, and so the intial page directory (initdir)
is used to allow the program to run in kernel space. Then, new 
page directories can be allocated and intialized, one for each
user.

Each user context will be given a page table, with the kernel
space already mapped for each user. Because paging is enabled, 
a user can only write to the console if a page table is set 
for that user with the appropriate console I/O mappings, or a 
system call is created for the kernel to perform the write. 

> export kernel :: Proc Unit
> kernel
>   = do wsetAttr console (wordToByte 0x20)
>        clearScreen
>        puts " Context switching kernel has booted!\n"
>        console `reInit` window (modIx 1)  (modIx 1)
>                                (modIx 23) (modIx 45)
>                                (wordToByte 0x0f)
>        clearScreen
>        putMimgBootData bootdata 
>        putPageDir initdir
>        initPhysMap bootdata
>        -- pgdir <- allocPageDir
>        -- Re-add code for running both users when page directories can be allocated and mapped
>        puts "\nHalting kernel, returning to mimgload\n"

> runTwo :: Ref MimgHeader -> Ref MimgHeader -> Proc Unit
> runTwo top bot
>   = do initUser ix0 top
>        initUser ix1 bot
>        set current ix0
>        initPICs
>        startTimer
>        returnToCurrent

> initUser :: Ix N -> Ref MimgHeader -> Proc Unit
> initUser ix h
>   = do entry <- get h.entry
>        puts "user code is at 0x"
>        putHex entry
>        puts "\n"
>        set (users @ ix).iframe.eip entry

> type N = 2 -- Number of user processes
> area users   <- initArray (\ix -> initUserContext B1) :: Ref (Array N Context)
> area current <- initStored ix0 :: Ref (Stored (Ix N))

> external returnTo :: Ref Context -> Proc Unit -- Void

> getUser :: Proc (Ref Context)
> getUser  = do curr <- get current
>               return (users @ curr)

> returnToCurrent :: Proc Unit
> returnToCurrent  = getUser >>= returnTo

> entrypoint unhandled :: Word -> Word -> Proc Unit
> unhandled exc frame
>   = do puts "Exception 0x"
>        putHex exc
>        puts ", frame=0x"
>        putHex frame
>        puts "\n"

> entrypoint timerInterrupt :: Proc Unit
> timerInterrupt
>   = do maskAckIRQ timerIRQ
>        enableIRQ  timerIRQ
>        t <- get ticks
>        set ticks (t+1)
>        clock t
>        if (t `and` 3)==0
>          then bar
>        if (t `and` 15)==0
>          then update current roundRobin
>               spin
>        returnToCurrent

> roundRobin  :: Ix N -> Ix N
> roundRobin i = case incIx i of
>                  Nothing -> ix0
>                  Just j  -> j

> area ticks <- initStored 1 :: Ref (Stored Word)

System calls and interrupt/exception handlers:

> entrypoint kputc :: Proc Unit
> kputc = do user <- getUser
>            get user.regs.eax >>= putchar
>            -- puts "kputc_imp called\n"
>            returnTo user

> entrypoint yield :: Proc Unit
> yield = returnToCurrent

